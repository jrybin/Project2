install.packages("knitr")
librart(knitr)
library(knitr)
M<-matrix(runif(1000000,1,100),5,10)
M
M<-matrix(runif(1000000,1,100),5000,10000)
M
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
makeCacheMatrix(M)
makeCacheMatrix(x=matrix((runif,1,100),5000,10000))
makeCacheMatrix(x=matrix(1:1000000,5000,10000))
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix(x=matrix(1:1000000,5000,10000))
makeCacheMatrix(M)
cacheSolve(M)
cacheSolve(M)
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(M)
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(M)
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2)
)
cacheSolve(a)
matrix(1:4,2,2)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve)
m<<- solve
getmatrix<-function()
m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2))
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()
x
setmatrix<-function(solve)
m<<- solve
getmatrix<-function()
m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("Getting data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a<-makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()
x
setmatrix<-function(solve)
m<<- solve
getmatrix<-function()
m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
## Function 2: This function calculates the invertion of matrix created above or if already done before then it
## returns its' stored value.
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("Displaying the cached matrix inversion.")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
M<-makeCacheMatrix(matrix(1:100,10,10))
cacheSolve(M)
M<-makeCacheMatrix(matrix(1:100,2,2))
cacheSolve(M)
M<-makeCacheMatrix(matrix(1:100,5,5))
cacheSolve(M)
M<-makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(M)
M<-makeCacheMatrix(matrix(c(4,3,3,2),2,2))
cacheSolve(M)
matrix(c(4,3,3,2),2,2)
M<-makeCacheMatrix(matrix(c(4,3,3,2),2,2))
cacheSolve(M)
cacheSolve(M)
makeCacheMatrix<-function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()
x
setmatrix<-function(solve)
m<<-solve
getmatrix<-function()
m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
## Function 2: This function calculates the invertion of matrix created above or if already done before then it
## returns its' stored value.
cacheSolve<-function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("Displaying the cached matrix inversion.")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
matrix(c(4,3,3,2),2,2)
M<-makeCacheMatrix(matrix(c(4,3,3,2),2,2))
M
cacheSolve(M)
## These two functions are designed to store an inverted matrix. First function creates a special object
## that can cache its' inversion Second function calculates the inversion of the matrix from the first function;
## if the inversion has been calculated before it returns the cached matrix.
## Function 1: This function creates a special "matrix",
## which is really a list to create matrix and cache its' inversion.
makeCacheMatrix<-function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()
x
setmatrix<-function(solve)
m<<-solve
getmatrix<-function()
m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
## Function 2: This function calculates the invertion of matrix created above or if already done before then it
## returns its' stored value.
cacheSolve<-function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("Displaying the cached matrix inversion.")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
## The simple way to check both functions.
## Remember that if you choose an non invertible matrix you'll get an error from solve function.
matrix(c(4,3,3,2),2,2)
M<-makeCacheMatrix(matrix(c(4,3,3,2),2,2))
cacheSolve(M)
cacheSolve(M)
matrix(c(4,3,3,2),2,2)
M<-makeCacheMatrix(matrix(c(4,3,3,2),2,2))
cacheSolve(M)
cacheSolve(M)
setwd("~/Documents/!JAKUB/97_Coursera/Data_Specialization/4_Exploratory_Data_Analysis/EDA_Course_project_1/Project2")
fileUrl<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
filePath<-"./data/exdata%2Fdata%2FNEI_data.zip"
if (!file.exists("data")) {
dir.create("data")
}
if (!file.exists(filePath)) {
download.file(fileUrl, destfile = filePath)
dateDownloaded <- date()
dateDownloaded
unzip(filePath, exdir="./data")
}
?fileurl
if (!file.exists(filePath)) {
download.file(fileUrl,destfile=filePath)
dateDownloaded <- date()
dateDownloaded
unzip(filePath, exdir="./data")
}
NEI<-readRDS("data/summarySCC_PM25.rds")
SCC<-readRDS("data/Source_Classification_Code.rds")
totalPM25ByYear<-tapply(NEI$Emissions, NEI$year, sum)
png("plot1.png")
plot(names(totalPM25ByYear),totalPM25ByYear, type="l",
xlab="Year",ylab=expression("Total"~PM[2.5]~"Emissions (tons)"),
main=expression("Total US"~PM[2.5]~"Emissions by Year"))
dev.off()
NEI<-readRDS("data/summarySCC_PM25.rds")
SCC<-readRDS("data/Source_Classification_Code.rds")
BaltimoreCity<-subset(NEI,fips=="24510")
totalPM25ByYear<-tapply(BaltimoreCity$Emissions,BaltimoreCity$year,sum)
png("plot2.png")
plot(names(totalPM25ByYear),totalPM25ByYear,type="l",
xlab="Year",ylab=expression("Total"~PM[2.5]~"Emissions (tons)"),
main=expression("Total Baltimore City"~PM[2.5]~"Emissions by Year"))
dev.off()
# Load packages:
library(plyr)
library(ggplot2)
# Data import:
NEI<-readRDS("data/summarySCC_PM25.rds")
SCC<-readRDS("data/Source_Classification_Code.rds")
# Plotting:
BaltimoreCity<-subset(NEI,fips =="24510")
typePM25ByYear<-ddply(BaltimoreCity,.(year,type),function(x) sum(x$Emissions))
colnames(typePM25ByYear)[3]<-"Emissions"
png("plot3.png")
qplot(year,Emissions,data=typePM25ByYear,color=type,geom="line") +
ggtitle(expression("Baltimore City"~PM[2.5]~"Emissions by Source Type and Year")) +
xlab("Year") +
ylab(expression("Total"~PM[2.5]~"Emissions (tons)"))
dev.off()
library(plyr)
library(ggplot2)
NEI <- readRDS("data/summarySCC_PM25.rds")
SCC <- readRDS("data/Source_Classification_Code.rds")
MV <- subset(NEI, (fips == "24510" | fips == "06037") & type=="ON-ROAD")
MV <- transform(MV,
region = ifelse(fips == "24510", "Baltimore City", "Los Angeles County"))
MVPM25ByYearAndRegion <- ddply(MV, .(year, region), function(x) sum(x$Emissions))
colnames(MVPM25ByYearAndRegion)[3] <- "Emissions"
png("plot6a.png")
qplot(year, Emissions, data=MVPM25ByYearAndRegion, geom="line", color=region) +
ggtitle(expression("Baltimore City and Los Angeles County" ~ PM[2.5] ~ "Motor Vehicle Emissions by Year")) +
xlab("Year") +
ylab(expression("Total" ~ PM[2.5] ~ "Emissions (tons)"))
dev.off()
Balt1999Emissions <- subset(MVPM25ByYearAndRegion,
year == 1999 & region == "Baltimore City")$Emissions
LAC1999Emissions <- subset(MVPM25ByYearAndRegion,
year == 1999 & region == "Los Angeles County")$Emissions
MVPM25ByYearAndRegionNorm <- transform(MVPM25ByYearAndRegion,
EmissionsNorm = ifelse(region == "Baltimore City",
Emissions / Balt1999Emissions,
Emissions / LAC1999Emissions))
png("plot6.png", width=600)
qplot(year, EmissionsNorm, data=MVPM25ByYearAndRegionNorm, geom="line", color=region) +
ggtitle(expression("Total" ~ PM[2.5] ~
"Motor Vehicle Emissions Normalized to 1999 Levels")) +
xlab("Year") +
ylab(expression("Normalized" ~ PM[2.5] ~ "Emissions"))
dev.off()
MV<-subset(NEI,(fips=="24510"|fips=="06037")&type=="ON-ROAD")
MV<-transform(MV,region=ifelse(fips=="24510","Baltimore City","Los Angeles County"))
MVPM25ByYearAndRegion<-ddply(MV,.(year,region), function(x) sum(x$Emissions))
colnames(MVPM25ByYearAndRegion)[3]<-"Emissions"
png("plot6a.png")
qplot(year,Emissions,data=MVPM25ByYearAndRegion,geom="line",color=region) +
ggtitle(expression("Baltimore City and Los Angeles County"~PM[2.5]~"Motor Vehicle Emissions by Year")) +
xlab("Year") +
ylab(expression("Total"~PM[2.5]~"Emissions (tons)"))
Balt1999Emissions<-subset(MVPM25ByYearAndRegion,year==1999&region=="Baltimore City")$Emissions
LAC1999Emissions<-subset(MVPM25ByYearAndRegion,year==1999&region=="Los Angeles County")$Emissions
dev.off()
MVPM25ByYearAndRegionNorm<-transform(MVPM25ByYearAndRegion,EmissionsNorm=ifelse(region=="Baltimore City",
Emissions/Balt1999Emissions,
Emissions/LAC1999Emissions))
png("plot6.png",width=600)
qplot(year,EmissionsNorm,data=MVPM25ByYearAndRegionNorm,geom="line",color=region) +
ggtitle(expression("Total"~PM[2.5]~"Motor Vehicle Emissions Normalized to 1999 Levels")) +
xlab("Year") +
ylab(expression("Normalized"~PM[2.5]~"Emissions"))
dev.off()
CoalCombustionSCC<-subset(SCC,EI.Sector%in%c("Fuel Comb - Comm/Institutional - Coal",
"Fuel Comb - Electric Generation - Coal",
"Fuel Comb - Industrial Boilers, ICEs - Coal"))
CoalCombustionSCC1<-subset(SCC,grepl("Comb",Short.Name)&grepl("Coal", Short.Name))
nrow(CoalCombustionSCC)
nrow(CoalCombustionSCC1)
d1<-setdiff(CoalCombustionSCC, CoalCombustionSCC1)
d2<-setdiff(CoalCombustionSCC1, CoalCombustionSCC)
length(d1)
length(d2)
d3<-setdiff(CoalCombustionSCC$SCC, CoalCombustionSCC1$SCC)
d4<-setdiff(CoalCombustionSCC1$SCC, CoalCombustionSCC$SCC)
length(d3)
length(d4)
CoalCombustionSCCCodes<-union(CoalCombustionSCC$SCC,CoalCombustionSCC1$SCC)
length(CoalCombustionSCCCodes)
CoalCombustion<-subset(NEI,SCC%in%CoalCombustionSCCCodes)
coalCombustionPM25ByYear<-ddply(CoalCombustion,.(year, type),function(x) sum(x$Emissions))
colnames(coalCombustionPM25ByYear)[3]<-"Emissions"
png("plot4.png")
qplot(year,Emissions,data=coalCombustionPM25ByYear,color=type,geom="line") +
stat_summary(fun.y="sum",fun.ymin="sum",fun.ymax="sum",
color="black",aes(shape="total"),geom="line") +
geom_line(aes(size="total",shape=NA)) +
ggtitle(expression("Coal Combustion"~PM[2.5]~"Emissions by Source Type and Year")) +
xlab("Year") +
ylab(expression("Total"~PM[2.5]~"Emissions (tons)"))
dev.off()
BaltimoreCityMV<-subset(NEI,fips=="24510"&type=="ON-ROAD")
BaltimoreMVPM25ByYear<-ddply(BaltimoreCityMV,.(year),function(x) sum(x$Emissions))
colnames(BaltimoreMVPM25ByYear)[2]<-"Emissions"
png("plot5.png")
qplot(year, Emissions, data=BaltimoreMVPM25ByYear, geom="line") +
ggtitle(expression("Baltimore City"~PM[2.5]~"Motor Vehicle Emissions by Year")) +
xlab("Year") +
ylab(expression("Total"~PM[2.5]~"Emissions (tons)"))
dev.off()
